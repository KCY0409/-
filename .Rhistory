library(ggplot2)
ggplot(data = mpg) +
geom_point(aes(displ,hwy,
colour = class))
# ggplot 객체
# ggplot은 그림 그리는 정보를 가지는 layer들을 겹쳐서 차트를 그리는 방식을 이용
# 대부분은 자동으로 지정을 해주고, 필수로 작성해야 하는 layer의 요소는 데이터, 연결정보, 기하 객체 입니다.
layer = ggplot(data, aes(<mapping>)) + geom_*
# gapminder 데이터 소개
# 움직이는 버블차트로 유명한 데이터셋
if(!require("gapminer")) install.packages("gapminer")
# gapminder 데이터 소개
# 움직이는 버블차트로 유명한 데이터셋
if(!require("gapminer")){install.packages("gapminer")}
# gapminder 데이터 소개
# 움직이는 버블차트로 유명한 데이터셋
if(!require("gapminder"))install.packages("gapminder")
library(gapminder)
str(gapminder)
p <- ggplot(data = gapminder,
aes(x = gdpPercep, y = lifeExp))
p
p <- ggplot(data = gapminder,
aes(x = gdpPercap, y = lifeExp))
p
summary(p)
p_point <- p + geom_point()
p_point
summary(p_point)
summary(p)
# 실습1
# 1. gapminder에서 country가 Afghanistan인 데이터만 뽑아서 gap_af로 저장하세요
View(gapminder)
gap_af <- gapminder$country = "Afghanistan"
gap_af <- gapminder$country == "Afghanistan"
gap_af
remove(gap_af)
library(dplyr)
filter(gapminder, country = "Afghanistan")
filter(gapminder, country == "Afghanistan")
gap_af <- filter(gapminder, country == "Afghanistan")
View(gap_af)
aes(x = year, y = lifeExp)) +
geom_line()
aes(x = year, y = lifeExp)) +
geom_line(na.rm = TRUE)
# 2. gap_af를 X축은 year, y축은 lifeExp로 line 차트를 그리세요.
ggplot(data = gap_af
aes(x = year, y = lifeExp), geom_line())
aes(x = year, y = lifeExp)) + geom_line
aes(x = year, y = lifeExp)) + geom_line()
# 2. gap_af를 X축은 year, y축은 lifeExp로 line 차트를 그리세요.
ggplot(data = gap_af,
aes(x = year, y = lifeExp)) + geom_line()
# scale 변경하기
p_point
library(ggplot2)
library(gapminder)
ggplot(gapminder) +
geom_point(aes(x = log10(gdpPercep),
y = lifeExp))
ggplot(gapminder) +
geom_point(aes(x = log10(gdpPercap),
y = lifeExp))
# scale_* 함수로 변경하기
(p_point_log10 <- p_point + scale_x_log10())
# color 정보를 aes를 이용해서 mapping하기
(p_point_color <- p +
geom_point(aes(color = continent)))
library(ggplot2)
geom_point(aes(color = continent))
library(ggplot2)
# color 정보를 aes를 이용해서 mapping하기
(p_point_color <- p +
# color 정보를 aes를 이용해서 mapping하기
(p_point_color <- p +
geom_point(aes(color = continent)))
# color 정보를 aes를 이용해서 mapping하기
(p_point_color <- p +
geom_point(aes(color = continent)))
library(ggplot2)
library(ggplot2)
# color 정보를 aes를 이용해서 mapping하기
(p_point_color <- p +
geom_point(aes(color = continent)))
summary(p_point_color)
# geom 특징 조절하기
# 기하 객체의 각 특징은 굳이 데이터에 매핑 될 필요없이 조절 가능
# 아래 두  summary를  확인해서 정보가 어떻게 다른지 확인
summary(p + geom_point(alpha = (1/3), size = 3 ))
summary(p + geom_point(aes(alpha = (1/3), size = 3)))
p + geom_point(alpha = (1/3), size = 3)
# stat_smooth로 간단히 추세선 추가하기
p_point
p_point + stat_smooth()
p_point + geom_smooth(lwd = 2,
se = FALSE,
mehthod = "lm")
# method를 lm(선형회귀)로 변경
p_point + stat_smooth()
p_point + geom_smooth(lwd = 2,
se = FALSE,
mehthod = "lm")
p_point + geom_smooth(lwd = 2,
se = TRUE,
mehthod = "lm")
p_point + geom_smooth(lwd = 2,
se = FALSE,
method = "lm")
# 색정보를 전체에 반영하기
# layer를 추가할 때 작성한 mapping 정보는 이후에 더해지는 layer에 반영되지 않음
# 그렇기 때문에 공통으로 사용하는 mapping 정보는 최초 ggplot 객체 생성시 aes() 항수로 반영해야 함
p_point_color +
geom_smooth(lwd = 2 , se = FALSE)
p + aes(color = continent) +
geom_point() +
geom_smooth(lwd = 1, se = FALSE)
p + aes(color = continent) +
geom_point() +
geom_smooth(lwd = 10, se = FALSE)
p + aes(color = continent) +
geom_point() +
geom_smooth(lwd = 1, se = FALSE)
# group과 color
p + aes(color = continent) +
geom_point() +
geom_smooth(lwd = 2, se  = FALSE)
p + aes(group = continent) +
geom_point() +
geom_smooth(lwd = 2 , se = FALSE)
# 행방향 조건 - filter / 열방향 조건 - select   기억해라 제발
library(dplyr)
library(gapminder)
# group으로 차트 나눠 그리기
# 대륙을 기준으로 차트를 그룹지어 나누어 그리기 가능 --> facet_*()함수 참고
(lp <- ggplot(gapminder) +
geom_jitter(aes(x = year, y = lifeExp)))
lp + facet_wrap( - continent)
lp + facet_wrap(- continent)
lp + facet_wrap(~ continent)
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot2(data = gapminder +
geom_bar(x = pop))
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder +
geom_bar(x = pop))
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder +
geom_bar(x = gapminder$pop))
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder,
geom_bar(x = gapminder$pop))
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder,
aes(x = gapminder$pop)) + geom_bar()
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder,
aes(x = pop)) + geom_bar()
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder,
aes(x = pop, y = count())) + geom_bar()
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(data = gapminder,
aes(x = pop)) + geom_bar()
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(gapminder,
aes(x = pop)) + geom_bar()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continet, y = lifeExp)) + geom_violin()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp)) + geom_violin()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp)) +
geom_violin() +
aes(color = mean()) +
geom_point()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp)) +
geom_violin() +
aes(color = mean())
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, color = mean(lifeexp))) +
geom_violin()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, color = mean(lifeExp))) +
geom_violin()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, color = mean(lifeExp))) +
geom_violin() + geom_point()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() + aes(color = mean(lifeExp))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(color = mean(lifeExp)) +
geom_point()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(color = mean(lifeExp)) +
geom_dotplot()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_dotplot(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(color = mean(lifeExp)) +
geom_dot()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(color = mean(lifeExp)) +
geom_errorbarh()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(color = mean(continet)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(group = continent) +
geom_jitter()
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(color = mean(lifeExp))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(x = continet, y = lifeExp, color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(x = continent, y = lifeExp, color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(x = continent, y = mean(lifeExp), color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_point(aes(x = continent, y = mean(lifeExp), color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_point(aes(x = continent, y = lifeExp, color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(group = continet)
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(group = continent)
geom_point(aes(color = mean(lifeExp))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
aes(group = continent) +
geom_point(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_point(aes(group = continent, color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_jitter(aes(group = continent, color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
geom_point(aes(color = mean(lifeExp)))
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
stat_summary(colro = "blue")
# continent를 x축 , lifeExp를 y축으로 하는 바이올린차트를 그리고 평균을 파란색 점으로 추가
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
stat_summary(color = "blue")
# 실습2
# gapminder에서 pop 히스토그램을 그리세요
ggplot(gapminder,
aes(x = pop)) + geom_histogram()
ggplot(gapminder,
aes(x =pop)) + geom_histogram()
ggplot(gapminder,
aes(x = continent, y = lifeExp, )) +
geom_violin() +
stat_summary(color = "blue")
# 행방향 조건 - filter / 열방향 조건 - select   기억해라 제발
library(dplyr)
library(gapminder)
library(ggplot2)
# 각 continent별로 총 몇개의 데이터가 있는지 세어 continent_freq를 만들고 bar차트를 그리세요.
count(gapminder$continent)
# 각 continent별로 총 몇개의 데이터가 있는지 세어 continent_freq를 만들고 bar차트를 그리세요.
summarise(gapminder$continent)
# 각 continent별로 총 몇개의 데이터가 있는지 세어 continent_freq를 만들고 bar차트를 그리세요.
summarise(gapminder)
View(gapminder)
filter(gapminder, continent = "Afghanistan")
filter(gapminder, continent = "Africa")
filter(gapminder, continent =="Africa")
filter(gapminder, continent == *)
filter(gapminder, continent == )
filter(gapminder)
gapminder %>% count(continet)
gapminder %>% count(continent)
# 각 continent별로 총 몇개의 데이터가 있는지 세어 continent_freq를 만들고 bar차트를 그리세요.
continent_freq <- gapminder %>% count(continent)
ggplot(continent_freq,
aes(x = continent)) + geom_bar()
ggplot(continent_freq,
aes(x = continent y = n())) + geom_bar()
ggplot(continent_freq,
aes(x = continent y = count())) + geom_bar()
ggplot(continent_freq,
aes(x = continent, y = count())) + geom_bar()
ggplot(continent_freq,
aes(x = continent, y = n())) + geom_bar()
ggplot(continent_freq,
aes(x = continent, y = c())) + geom_bar()
aes(x = continent) + geom_bar()
ggplot(continent_freq,
ggplot(data = continent_freq,
aes(x = continent) + geom_bar()
ggplot(data = continent_freq,
aes(x = continent)) + geom_bar()
ggplot(continent_freq,
aes(x = continent)) + geom_bar()
ggplot(continent_freq,
aes(x = continent, y = n)) + geom_bar()
ggplot(continent_freq,
aes(x = continent, y = n)) + geom_bar(stats = "identity")
ggplot(continent_freq,
aes(x = continent, y = n)) + geom_bar(stats = "identity")
ggplot(continent_freq,
aes(x = continent, y = n)) + geom_bar(stat = "identity")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
filter(gapminder, country == "Canada", "Rwanda", "Cambodia", "Mexico")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
filter(gapminder, country == "Canada" & "Rwanda"& "Cambodia"& "Mexico")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% gapminder$country == "Canada"
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% country == "Canada"
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter("Canada")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == "Canada")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == "Canada", "Rwanda")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == "Canada, Rwanda")
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
View(gapminder %>% filter(country == "Canada, Rwanda"))
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
Viewgapminder %>% filter(country == c("Canada", "Rwanda"))
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == c("Canada", "Rwanda"))
# Canada, Rwanda, Cambodia, Mexicp 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == c("Canada", "Rwanda", "Cambodia", "Mexico"))
# Canada, Rwanda, Cambodia, Mexico 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
gapminder %>% filter(country == c("Canada", "Rwanda", "Cambodia", "Mexico"))
jCountries <- c("Canada", "Rwanda", "Cambodia", "Mexico")
jCountries
gapminder %>% filter(country %in% jCountries) %>%
ggplot(aes(x = year, y = lifeExp, color = country)) +
geom_line() + geom_point()
# Canada, Rwanda, Cambodia, Mexico 4 나라만 사용하여 x축은 year, y축은 lifeExp로 line 차트를 각 년도에 점을 추가하여 그리세요
FC <- gapminder %>% filter(country == c("Canada", "Rwanda", "Cambodia", "Mexico"))
aes(x = year, y = lifeExp, color = country)) +
geom_line() + geom_point()
ggplot(FC,
aes(x = year, y = lifeExp, color = country)) +
geom_line() + geom_point()
gapminder %>% filter(country %in% jCountries) %>%
ggplot(aes(x = year, y = lifeExp, color = country)) +
geom_line() + geom_point()
# 만든 그래프 정리하기
# ggplot2을 이용해 출력한 차트는 2가지 방식으로 저장 가능
# 하나는 rstudio에서 제공하는 GUI방식이고, 다은 하나는 패키지에서 지원하는 ggsave함수를 사용하는 방식
dir.create("../ggsave", showWarnings =  F)
ggsave("../ggsave/last.png")
# ggmap으로 ggplot객체로 만들기
# get_googlemap() 함수는 google지도를 ggmap 객체로 가져오는 함수입니다. 그래서 추가적으로 ggmap()함수를 이용해서 ggplot객체로 변환해야 함
# windows는 인코딩 문제가 있어서 URLencode(enc2utf8("장소")) 의 형태로 사용해야 합니다.
library(ggmap)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(ggplot2)
library(ggmap)
# ggmap으로 ggplot객체로 만들기
# get_googlemap() 함수는 google지도를 ggmap 객체로 가져오는 함수입니다. 그래서 추가적으로 ggmap()함수를 이용해서 ggplot객체로 변환해야 함
# windows는 인코딩 문제가 있어서 URLencode(enc2utf8("장소")) 의 형태로 사용해야 합니다.
if(!require("ggmap")), install.packages("ggmap")
# ggmap으로 ggplot객체로 만들기
# get_googlemap() 함수는 google지도를 ggmap 객체로 가져오는 함수입니다. 그래서 추가적으로 ggmap()함수를 이용해서 ggplot객체로 변환해야 함
# windows는 인코딩 문제가 있어서 URLencode(enc2utf8("장소")) 의 형태로 사용해야 합니다.
if(!require("ggmap"))install.packages("ggmap")
library(ggmap)
# for windows
loc <- URLencode(enc2utf8("서울 "))
tar <- URLencode(enc2utf8("서울시청"))
geocityhall <- geocode(tar)
geocityhall <-geocode(tar)
get_googlemap(loc,
maptype = "roadmap",
markers = geocityhall) %>%
ggmap()
loc <- URLencode(enc2utf8("서울"))
tar <- URLencode(enc2utf8("서울시청"))
geocityhall <-geocode(tar)
get_googlemap(loc,
maptype = "roadmap",
markers = geocityhall) %>%
ggmap()
loc <- URLencode(enc2utf8("서울"))
tar <- URLencode(enc2utf8("서울시청"))
geocityhall <-geocode(tar)
geocityhall <-geocode(tar)
get_googlemap(loc,
maptype = "roadmap",
markers = geocityhall) %>%
ggmap()
# for windows
loc <- URLencode(enc2utf8("서울"))
tar <- URLencode(enc2utf8("서울시청"))
geocityhall <-geocode(tar)
get_googlemap(loc,
maptype = "roadmap",
markers = geocityhall) %>%
ggmap()
